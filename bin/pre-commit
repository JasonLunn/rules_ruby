#!/usr/bin/env bash
#
# Main dependency shell script that installs BashMatic Library in ~/.bashmatic folder.

export COLUMNS=75

set -e
# shellcheck disable=SC1091
source "bin/deps"

[[ -n $(command -v rubocop) ]] || {
  # shellcheck disable=SC1091
  source bin/setup
  setup::main gems
}

run::set-all abort-on-error

fix::rubocop() {
  h2::green "Running Rubocop, please wait..."
  run       "rubocop || rubocop -a"
  inf       "Rubocop completed."
  ok:
}

# runs buildifer from the PATH if it exists, otherwise bazel target
# we want pre-commit to be as fast as possible.
fix::buildifier() {
  h2::green "Buildifier"
  if [[ -n $(command -v buildifier) ]]; then
    info "Running $(command -v buildifier).."
    run "find . -name 'BUILD*' -o -name 'WORKSPACE' -o -name '*.bzl'  | grep -v '.git' | xargs buildifier -v"
  else
    info "Running ${bldylw}bazel run :buildifier..."
    run "bazel run :buildifier"
  fi
}

__fix::cleanup() {
  h2::green "Cleaning up..."
  for f in "${__git_pre}" "${__git_post}"; do
    [[ -f ${f} ]] && run "rm -f ${f}"
  done
}

export __git_pre="/tmp/rules-ruby-git-status-pre-commit.$$"
export __git_post="/tmp/rules-ruby-git-status-post-commit.$$"

trap __fix::cleanup EXIT

fix() {
  # number of modified files
  local changes_before=$(git status -s | md5)

  git status -s >"${__git_pre}"

  fix::rubocop
  fix::buildifier

  git status -s >"${__git_post}"

  local changes_after=$(git status -s | md5)
  if [[ ${changes_before} != "${changes_after}" ]]; then
    hl::subtle "Git status -s output changed after pre-commit hook."
    info "Changes before pre-commit hook:"
    hr
    diff "${pre}" "${post}"
    hr
    echo
    info "ACTION: ${bldylw}Please add any respective files to the commit and retry."
    exit 1
  else
    hr
    info "No changes detected, commit will proceed."
    exit 0
  fi
}

fix "$@"

exit 0
