version: 2.1

jobs:
  generate_cache: &bazel_defaults
    working_directory: /home/circleci/repo
    resource_class: medium
    docker:
      - image: bazelruby/ruby-2.6.5
    environment:
      PATH: "/usr/local/bin:/usr/bin:/sbin:/opt/bin:/home/circleci/repo/bin:/bin:/sbin:/usr/sbin"
      BUNDLE_PATH: /home/circleci/.bundle_cache
      BAZEL_OPTS: "--host_jvm_args=-Xmx400m --host_jvm_args=-Xms400m"
      BAZEL_BUILD_OPTS: "--curses=no --verbose_failures --jobs 10"
      BAZEL_TEST_OPTS: "--verbose_failures --test_output=streamed --test_verbose_timeout_warnings "

    steps:
      - checkout

      - run:
          name: "Install ~/.bazelrc"
          command: |
            cp .circleci/.bazelrc ${HOME}

      - run:
          name: "Setup"
          command: |
            /usr/bin/env bash bin/setup

      - run:
          name: "Bazel Build All"
          command: bazel ${BAZEL_OPTS} build ${BAZEL_BUILD_OPTS} -- //...

      - run:
          name: "Generate Cache SHA"
          command: |
            source bin/deps && bazel-sha > bazel.sha

      - save_cache:
          paths:
            - /home/circleci/repo/bazel.sha
            - /home/circleci/.bazelrc
          key: v2-bazel-sha-{{ .Revision }}

      - save_cache:
          paths:
            - /home/circleci/.cache/bazel/_bazel_circleci
          key: v2-bazel-deps-{{ checksum "bazel.sha" }}

  rubocop:
    <<: *bazel_defaults

    steps:
      - checkout

      - restore_cache:
          keys:
            - v2-bazel-sha-{{ .Revision }}

      - restore_cache:
          keys:
            - v2-bundle-deps-{{ .Branch }}-{{ checksum "Gemfile.lock" }}

      - run:
          name: Install Bundler
          command: |
            gem install bundler:2.0.2 --no-doc
            bundle install --jobs=4 --retry=3 --path ${BUNDLE_PATH}

      - save_cache:
          paths:
            - /home/circleci/.bundle_cache
          key: v2-bundle-deps-{{ .Branch }}-{{ checksum "Gemfile.lock" }}

      - run:
          name: "Rubocop Style Check"
          command: bundle exec rubocop -E -P

  bazel_build_workspace:
    <<: *bazel_defaults

    steps:
      - checkout

      - restore_cache:
          keys:
            - v2-bazel-sha-{{ .Revision }}
              
      - restore_cache:
          keys:
            - v2-bazel-deps-{{ checksum "bazel.sha" }}

      - run:
          name: "Setup"
          command: |
            /usr/bin/env bash bin/setup

      - run:
          name: "Show Bazel Info"
          command: |
            /usr/bin/env bash bin/ci bazel-info

      - run:
          name: "Bazel Build & Test Workspace"
          command: |
            /usr/bin/env bash bin/ci workspace

  bazel_build_examples:
    <<: *bazel_defaults

    steps:
      - checkout

      - restore_cache:
          keys:
            - v2-bazel-sha-{{ .Revision }}
            - v2-bazel-deps-{{ checksum "bazel.sha" }}

      - run:
          name: "Setup"
          command: |
            /usr/bin/env bash bin/setup

      - run:
          name: "Bazel Examples Build"
          command: |
            (cd examples/simple_script && bazel ${BAZEL_OPTS} build ${BAZEL_BUILD_OPTS} -- //...)

      - run:
          name: "Bazel Examples Test"
          command: |
            (cd examples/simple_script && bazel ${BAZEL_OPTS} test ${BAZEL_BUILD_OPTS} ${BAZEL_TEST_OPTS} -- //...)

      - run:
          name: "Bazel Rubocop Test"
          command: |
            (cd examples/simple_script && bazel ${BAZEL_OPTS} run ${BAZEL_BUILD_OPTS} -- :rubocop)

  buildifier:
    <<: *bazel_defaults

    steps:
      - checkout

      - restore_cache:
          keys:
            - v2-bazel-sha-{{ .Revision }}
            - v2-bazel-deps-{{ checksum "bazel.sha" }}

      - run:
          name: "Setup"
          command: |
            /usr/bin/env bash bin/setup

      - run:
          name: "Bazel Buildifier Build"
          command: |
            bazel ${BAZEL_OPTS} build ${BAZEL_BUILD_OPTS} :buildifier-check

      - run:
          name: "Bazel Buildifier Run"
          command: |
            bazel ${BAZEL_OPTS} run   ${BAZEL_BUILD_OPTS} :buildifier-check

workflows:
  rules_ruby:
    jobs:
      - generate_cache
      - bazel_build_workspace:
          requires:
            - generate_cache
      - bazel_build_examples:
          requires:
            - generate_cache
      - buildifier:
          requires:
            - generate_cache
