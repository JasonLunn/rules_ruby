version: 2.1

jobs:
  ruby_style: &bazel_defaults
    working_directory: /home/circleci/repo
    resource_class: medium
    docker:
      - image: bazelruby/ruby-2.6.5
    environment:
      PATH: "/usr/local/bin:/usr/bin:/sbin:/opt/bin:/home/circleci/repo/bin:/bin:/sbin:/usr/sbin"
      BUNDLE_PATH: /home/circleci/.bundle_cache
      BAZEL_OPTS: "--host_jvm_args=-Xmx400m --host_jvm_args=-Xms400m"
      BAZEL_BUILD_OPTS: "--curses=no --verbose_failures --jobs 10"
      BAZEL_TEST_OPTS: "--verbose_failures --test_output=streamed --test_verbose_timeout_warnings "

    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "Gemfile.lock" }}
      - run:
          name: Install Bundler
          command: |
            gem install bundler:2.0.2 --no-doc
            bundle install --jobs=4 --retry=3 --path ${BUNDLE_PATH}

      - save_cache:
          paths:
            - ${BUNDLE_PATH}
          key: v1-dependencies-{{ checksum "Gemfile.lock" }}

      - run:
          name: Which everything?
          command: |
            set +e
            bundle -v
            ruby --version
            gcc --version | head -1
            cc --version  | head -1
            openssl version

      - run:
          name: "Rubocop Style Check"
          command: bundle exec rubocop -E -P

  bazel_rules: 
    <<: *bazel_defaults

    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-bazel-{{ checksum ".bazelversion" }}
      - run:
          name: "Custom Setup Script"
          command: |
            /usr/bin/env bash bin/setup-linux

      - save_cache:
          paths:
            - ${BUNDLE_PATH}
          key: v1-bazel-{{ checksum ".bazelversion" }}

      - run:
          name: "Install ~/.bazelrc"
          command: |
            cp .circleci/.bazelrc ${HOME}

      - run:
          name: "Show Bazel Info"
          command: |
            bazel $BAZEL_OPTS version
            bazel $BAZEL_OPTS info
            bazel $BAZEL_OPTS fetch --curses=no -- "//ruby/..."
            (cd examples && bazel $BAZEL_OPTS fetch --curses=no -- "//...")

      - run:
          name: "Bazel Rules Build"
          command: |
            bazel ${BAZEL_OPTS} build ${BAZEL_BUILD_OPTS} -- //...

      - run:
          name: "Bazel Rules Test"
          command: |
            bazel ${BAZEL_OPTS} test ${BAZEL_BUILD_OPTS} ${BAZEL_TEST_OPTS} -- //...

  bazel_examples:
    <<: *bazel_defaults

    steps:
      - checkout

      - restore_cache:
          keys:
            - v1-bazel-{{ checksum ".bazelversion" }}

      - run:
          name: "Custom Setup Script"
          command: |
            /usr/bin/env bash bin/setup-linux

      - save_cache:
          paths:
            - ${BUNDLE_PATH}
          key: v1-bazel-{{ checksum ".bazelversion" }}

      - run:
          name: "Install ~/.bazelrc"
          command: |
            cp .circleci/.bazelrc ${HOME}

      - run:
          name: "Bazel Examples Build"
          command: |
            (cd examples/simple_script && bazel ${BAZEL_OPTS} build ${BAZEL_BUILD_OPTS} -- //...)

      - run:
          name: "Bazel Examples Test"
          command: |
            (cd examples/simple_script && bazel ${BAZEL_OPTS} test ${BAZEL_BUILD_OPTS} ${BAZEL_TEST_OPTS} -- //...)

  bazel_buildifier:
    <<: *bazel_defaults

    steps:
      - checkout

      - restore_cache:
          keys:
            - v1-bazel-{{ checksum ".bazelversion" }}

      - run:
          name: "Custom Setup Script"
          command: |
            /usr/bin/env bash bin/setup-linux

      - save_cache:
          paths:
            - ${BAZEL_INSTALLER_DIR}
          key: v1-bazel-{{ checksum ".bazelversion" }}

      - run:
          name: "Install ~/.bazelrc"
          command: |
            cp .circleci/.bazelrc ${HOME}

      - run:
          name: "Bazel Buildifier Check"
          command: |
            bazel ${BAZEL_OPTS} build ${BAZEL_BUILD_OPTS} :buildifier-check
            bazel ${BAZEL_OPTS} run   ${BAZEL_BUILD_OPTS} :buildifier-check

workflows:
  rules_ruby:
    jobs:
      - ruby_style
      - bazel_rules
      - bazel_examples
      - bazel_buildifier
